# -*- coding: utf-8 -*-
"""M22AIE201_DLOps_ClassAssignment_2_Q_2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10C8wfy75LRUlr9O_uV_1rQuMFKQd6Y5c
"""

import torchvision.models as models

resnet101 = models.resnet101(pretrained=True)

# imports
import matplotlib.pyplot as plt
import numpy as np

import torch
import torchvision
import torchvision.transforms as transforms

import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim

# transforms
transform = transforms.Compose(
    [transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))])

# datasets
trainset = torchvision.datasets.STL10('./data',
    download=True,
    transform=transform)
testset = torchvision.datasets.STL10('./data',
    download=True,
    transform=transform)

# dataloaders
trainloader = torch.utils.data.DataLoader(trainset, batch_size=2,shuffle=True)

testloader = torch.utils.data.DataLoader(testset, batch_size=4,shuffle=False)

for p in resnet101.parameters():
    p.requires_grad = False

resnet101.fc = nn.Linear(resnet101.fc.in_features, 10)

"""Run either of optimizer apply"""

optimizer = optim.Adagrad(resnet101.parameters(), lr=0.005)

criterion = nn.CrossEntropyLoss()

current_loss = 0.0

for batch in trainloader:
  features = batch[0]
  labels = batch[1]

  optimizer.zero_grad()
  outputs = resnet101(features)

  loss = criterion(outputs, labels)
  
  optimizer.step()

  current_loss += loss.item()
  print(f'current batch loss is : {current_loss}')
print(f'overall batch loss is : {current_loss}')